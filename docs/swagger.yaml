definitions:
  arex.comparing:
    properties:
      options:
        type: string
      vx:
        type: string
      vy:
        type: string
    type: object
  arex.validation:
    properties:
      input:
        type: string
      key:
        type: string
      result:
        type: string
      schema:
        type: string
    type: object
info:
  contact:
    email: support@swagger.io
    name: arexadmin@arex.com
    url: http://www.swagger.io/support
  description: AREX Analysis to generate json-schema, to generate testcase auto.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: AREX Analysis
  version: "1.0"
paths:
  /comparing:
    post:
      consumes:
      - application/json
      description: post 2 json and return the difference
      parameters:
      - description: comparing struct
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/arex.comparing'
      produces:
      - application/json
      responses:
        "201":
          description: '[]object'
          schema:
            type: string
        "400":
          description: '---'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: compare json
      tags:
      - Comparing JSON
  /schema/{key}:
    get:
      consumes:
      - application/json
      description: Query one json-schema by key
      parameters:
      - description: schema key name
        in: path
        name: key
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: '{}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: query json-schema by key
      tags:
      - JSON-Schema
    patch:
      consumes:
      - application/json
      description: post new json and parse it to merge existed json-schema
      parameters:
      - description: schema key name
        in: path
        name: key
        required: true
        type: string
      - description: '{}'
        in: body
        name: body
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: '---'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: patchSchema to merge new json to schema and merge to existed json-schema
      tags:
      - JSON-Schema
    post:
      consumes:
      - application/json
      description: post data to store. path /keyName. Body {}json-schema
      parameters:
      - description: restapiApplication-L2FjdHVhdG9yL21hcHBpbmdz
        in: path
        name: key
        required: true
        type: string
      - description: '{}'
        in: body
        name: body
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: '---'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: store json-schema to database by key
      tags:
      - JSON-Schema
    put:
      consumes:
      - application/json
      description: post /schema-key body contain origin json string {}
      parameters:
      - description: schema key name
        in: path
        name: key
        required: true
        type: string
      - description: '{json}'
        in: body
        name: body
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: '---'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: input json and parse json to schema, then save the schema by key
      tags:
      - JSON-Schema
  /schemas:
    get:
      consumes:
      - application/json
      description: |-
        ?limit=10 limit the max range
        http Get /schemas
      parameters:
      - description: query limit count
        in: path
        name: limit
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: '[]json-schemas'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Query all json-schema format json
      tags:
      - JSON-Schema
  /schemas/{key}:
    delete:
      consumes:
      - application/json
      description: send DELETE method http by jsonschema key
      parameters:
      - description: schema key name
        in: path
        name: key
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: '---'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: delete json-schema by key
      tags:
      - JSON-Schema
  /testcases/golang/{appid}:
    get:
      consumes:
      - application/json
      description: |-
        appid/?start=2022-2-22 limit the beggining
        http Get /schemas
      parameters:
      - description: start date
        in: path
        name: start
        required: true
        type: string
      produces:
      - text/plain
      responses:
        "200":
          description: json data
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Query testcases json of golang
      tags:
      - Testcases
  /testcases/postman/{appid}:
    get:
      consumes:
      - application/json
      description: |-
        appid/?start=2022-2-22 limit the beggining
        http Get /schemas
      parameters:
      - description: start date
        in: path
        name: start
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: json data
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Query testcases json of postman
      tags:
      - Testcases
  /validation:
    post:
      consumes:
      - application/json
      description: |-
        post struct that include schema's key and json that will be valid. return valid result
        if key is not exist, then it return nil
      parameters:
      - description: struct validation{}
        in: body
        name: validation
        required: true
        schema:
          $ref: '#/definitions/arex.validation'
      produces:
      - application/json
      responses:
        "200":
          description: '{result}'
          schema:
            type: string
        "400":
          description: '{result}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: 'valid json by json-schema (input: validation struct)'
      tags:
      - Validate by json-schema
  /validation/{key}:
    get:
      consumes:
      - application/json
      description: get by keyname and body (Json format), then valid json by the keyname's
        json-schema
      parameters:
      - description: schema key name
        in: path
        name: key
        required: true
        type: string
      - description: '{}'
        in: body
        name: body
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: '---'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Validate json by json-schema that stored in database
      tags:
      - Validate by json-schema
swagger: "2.0"
