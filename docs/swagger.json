{
    "swagger": "2.0",
    "info": {
        "description": "AREX Analysis to generate json-schema, to generate testcase auto.",
        "title": "AREX Analysis",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "arexadmin@arex.com",
            "url": "http://www.swagger.io/support",
            "email": "support@swagger.io"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "1.0"
    },
    "paths": {
        "/comparing": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "post 2 json and return the difference",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Comparing JSON"
                ],
                "summary": "compare json",
                "parameters": [
                    {
                        "description": "comparing struct",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/arex.comparing"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "[]object",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "---",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/schema/{key}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Query one json-schema by key",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "JSON-Schema"
                ],
                "summary": "query json-schema by key",
                "parameters": [
                    {
                        "type": "string",
                        "description": "schema key name",
                        "name": "key",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{}",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "post /schema-key body contain origin json string {}",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "JSON-Schema"
                ],
                "summary": "input json and parse json to schema, then save the schema by key",
                "parameters": [
                    {
                        "type": "string",
                        "description": "schema key name",
                        "name": "key",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "{json}",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "---",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "post data to store. path /keyName. Body {}json-schema",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "JSON-Schema"
                ],
                "summary": "store json-schema to database by key",
                "parameters": [
                    {
                        "type": "string",
                        "description": "restapiApplication-L2FjdHVhdG9yL21hcHBpbmdz",
                        "name": "key",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "{}",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "---",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "post new json and parse it to merge existed json-schema",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "JSON-Schema"
                ],
                "summary": "patchSchema to merge new json to schema and merge to existed json-schema",
                "parameters": [
                    {
                        "type": "string",
                        "description": "schema key name",
                        "name": "key",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "{}",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "---",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/schemas": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "?limit=10 limit the max range\nhttp Get /schemas",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "JSON-Schema"
                ],
                "summary": "Query all json-schema format json",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "query limit count",
                        "name": "limit",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "[]json-schemas",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/schemas/{key}": {
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "send DELETE method http by jsonschema key",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "JSON-Schema"
                ],
                "summary": "delete json-schema by key",
                "parameters": [
                    {
                        "type": "string",
                        "description": "schema key name",
                        "name": "key",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "---",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/testcases/golang/{appid}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "appid/?start=2022-2-22 limit the beggining\nhttp Get /schemas",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "text/plain"
                ],
                "tags": [
                    "Testcases"
                ],
                "summary": "Query testcases json of golang",
                "parameters": [
                    {
                        "type": "string",
                        "description": "start date",
                        "name": "start",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "json data",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/testcases/postman/{appid}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "appid/?start=2022-2-22 limit the beggining\nhttp Get /schemas",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Testcases"
                ],
                "summary": "Query testcases json of postman",
                "parameters": [
                    {
                        "type": "string",
                        "description": "start date",
                        "name": "start",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "json data",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/validation": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "post struct that include schema's key and json that will be valid. return valid result\nif key is not exist, then it return nil",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Validate by json-schema"
                ],
                "summary": "valid json by json-schema (input: validation struct)",
                "parameters": [
                    {
                        "description": "struct validation{}",
                        "name": "validation",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/arex.validation"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{result}",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "{result}",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/validation/{key}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "get by keyname and body (Json format), then valid json by the keyname's json-schema",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Validate by json-schema"
                ],
                "summary": "Validate json by json-schema that stored in database",
                "parameters": [
                    {
                        "type": "string",
                        "description": "schema key name",
                        "name": "key",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "{}",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "---",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "arex.comparing": {
            "type": "object",
            "properties": {
                "options": {
                    "type": "string"
                },
                "vx": {
                    "type": "string"
                },
                "vy": {
                    "type": "string"
                }
            }
        },
        "arex.validation": {
            "type": "object",
            "properties": {
                "input": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "result": {
                    "type": "string"
                },
                "schema": {
                    "type": "string"
                }
            }
        }
    }
}